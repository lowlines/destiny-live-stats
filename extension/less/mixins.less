/* 	-------------------------------------------------
 	Base Mixins
	------------------------------------------------- */
.font-face(@fontFamily, @fontPath, @fontWeight: 'normal') {
	@font-face {
		font-family: '@{fontFamily}';
		//src: url('@{root}/fonts/@{fontName}/@{fontName}.eot');
		//src: url('@{root}/fonts/@{fontName}/@{fontName}.eot?#iefix') format('embedded-opentype'),
		src: url('@{root}/fonts/@{fontPath}.woff') format('woff'),
		url('@{root}/fonts/@{fontPath}.woff2') format('woff2'),
			//url('@{root}/fonts/@{fontName}/@{fontName}.ttf') format('truetype'),
		url('@{root}/fonts/@{fontPath}.svg#webfont') format('svg');
		font-weight: @fontWeight;
	}
}
.font-family(@fontFamily) {
	font-family: @fontFamily;
	-webkit-font-smoothing: antialiased;
	font-style: normal;
	//font-weight: normal;
}

.fontawesome-pseudo(@icon) {
	content: @icon;
	display: inline-block;
	font-family: FontAwesome;
	-webkit-font-smoothing: antialiased;
	font-style: normal;
	font-weight: normal;
}
.fontawesome(@icon, @location:before) when (@location = before) {
	&:before {
		.fontawesome-pseudo(@icon);
	}
}
.fontawesome(@icon, @location:before) when (@location = after) {
	&:after {
		.fontawesome-pseudo(@icon);
	}
}

.clear() {
	&:after {
		content: '';
		display: block;
		clear: both;
	}
}

.opacity(@opacity) when (@opacity > 1) {
	@opacityDecimal: @opacity / 100;
	-ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(opacity=(@{opacity}))";
	filter: ~"alpha(opacity=(@{opacity}))";
	-moz-opacity: @opacityDecimal;
	opacity: @opacityDecimal;
}
.opacity(@opacity) when (@opacity <= 1) {
	.opacityd(@opacity);
}
.opacityd(@opacityDecimal) {
	@opacity: @opacityDecimal * 100;
	-ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(opacity=(@{opacity}))";
	filter: ~"alpha(opacity=(@{opacity}))";
	-moz-opacity: @opacityDecimal;
	opacity: @opacityDecimal;
}

.placeholder-rules(@rules) {
	&::-webkit-input-placeholder { @rules(); }
	&:-moz-placeholder { @rules(); }
	&:-ms-placeholder { @rules(); }
	&:-ms-input-placeholder { @rules(); }
}

.box-shadow(@boxShadow) {
	box-shadow: @boxShadow;
	-webkit-box-shadow: @boxShadow;
	-moz-box-shadow: @boxShadow;
}

/* 	-------------------------------------------------
 	Grayscale Filter
	------------------------------------------------- */
.grayscale {
	.opacity(0.5);
	filter: url("data:image/svg+xml;utf8,&lt;svg xmlns=\'http://www.w3.org/2000/svg\'&gt;&lt;filter id=\'grayscale\'&gt;&lt;feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/&gt;&lt;/filter&gt;&lt;/svg&gt;#grayscale"); /* Firefox 10+, Firefox on Android */
	filter: gray; /* IE6-9 */
	-webkit-filter: grayscale(100%); /* Chrome 19+, Safari 6+, Safari 6+ iOS */
}
.no-grayscale {
	.opacity(100);
	filter: none;
	-webkit-filter: grayscale(0%);
}

/* 	-------------------------------------------------
 	Animations
	------------------------------------------------- */
.keyframes(@name, @rules) {
	@-moz-keyframes @name { @rules(); }
	@-webkit-keyframes @name { @rules(); }
	@-o-keyframes @name { @rules(); }
	@keyframes @name { @rules(); }
}
.vendor(@property, @value) {
	-webkit-@{property}: @value;
	-moz-@{property}: @value;
	-o-@{property}: @value;
		@{property}: @value;
}

.animation(@property, @value) when (@value = false) {
	.vendor(animation, @property);
}
.animation(@property, @value) when (@value) {
	.vendor(@property, @value);
}
.transform(@value) {
	.vendor(transform, @value);
}

/* 	-------------------------------------------------
 	Media Wraps
	------------------------------------------------- */
.media-large-desktop(@rules) {
	@media (min-width: @screen-lg-min) { @rules(); }
}
.media-desktop-and-up(@rules) {
	@media (min-width: @screen-md-min) { @rules(); }
}
.media-desktop-and-down(@rules) {
	@media (max-width: (@screen-lg-min - 1)) { @rules(); }
}
.media-desktop(@rules) {
	@media (min-width: @screen-md-min) and (max-width: (@screen-lg-min - 1)) { @rules(); }
}
.media-tablet-and-up(@rules) {
	@media (min-width: @screen-sm-min) { @rules(); }
}
.media-tablet(@rules) {
	@media (min-width: @screen-sm-min) and (max-width: (@screen-md-min - 1)) { @rules(); }
}
.media-tablet-and-down(@rules) {
	@media (max-width: (@screen-md-min - 1)) { @rules(); }
}
.media-landscape-phone(@rules) {
	@media (max-width: (@screen-sm-min - 1)) { @rules(); }
}
.media-portrait-phone(@rules) {
	@media (max-width: (@screen-xs-min - 1)) { @rules(); }
}